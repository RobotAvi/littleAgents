"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö, –∞–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–æ–≤ –∏ –∫–æ–¥-—Ä–µ–≤—å—é.
"""

import streamlit as st
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from shared.llm_client import llm_client
from shared.config import Config
from shared.utils import (
    create_streamlit_header, display_metrics, 
    display_data_table, send_notification, 
    validate_config, async_to_sync
)
from datetime import datetime, timedelta
import subprocess

def main():
    create_streamlit_header(
        "–ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏", 
        "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∏ –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    )
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = Config.get_utility_config('git_monitor')
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        repo_paths = st.text_area(
            "–ü—É—Ç–∏ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):",
            value="/workspace\n/home/user/project1"
        ).strip().split('\n')
        
        # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
        period = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:",
            ["–°–µ–≥–æ–¥–Ω—è", "–í—á–µ—Ä–∞", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è", "–ù–µ–¥–µ–ª—è"],
            index=0
        )
        
        # –ê–≤—Ç–æ—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        author_filter = st.text_input("–§–∏–ª—å—Ç—Ä –ø–æ –∞–≤—Ç–æ—Ä—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):")
        
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
            st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìä –û–±–∑–æ—Ä", "üìù –ö–æ–º–º–∏—Ç—ã", "üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    ])
    
    with tab1:
        st.subheader("üìä –û–±–∑–æ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        
        with st.spinner("–ê–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤..."):
            commits_data = []
            
            for repo_path in repo_paths:
                if repo_path.strip() and os.path.exists(repo_path.strip()):
                    try:
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–∏—Ç–æ–≤
                        os.chdir(repo_path.strip())
                        
                        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è git log
                        if period == "–°–µ–≥–æ–¥–Ω—è":
                            since = "1.day.ago"
                        elif period == "–í—á–µ—Ä–∞":
                            since = "2.days.ago"
                        elif period == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è":
                            since = "3.days.ago"
                        else:
                            since = "1.week.ago"
                        
                        cmd = ["git", "log", f"--since={since}", "--oneline", "--pretty=format:%H|%an|%ad|%s", "--date=short"]
                        result = subprocess.run(cmd, capture_output=True, text=True)
                        
                        for line in result.stdout.strip().split('\n'):
                            if line:
                                parts = line.split('|', 3)
                                if len(parts) >= 4:
                                    commits_data.append({
                                        'repo': os.path.basename(repo_path.strip()),
                                        'hash': parts[0][:8],
                                        'author': parts[1],
                                        'date': parts[2],
                                        'message': parts[3]
                                    })
                    except Exception as e:
                        st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {repo_path}: {e}")
            
            if commits_data:
                # –ú–µ—Ç—Ä–∏–∫–∏
                total_commits = len(commits_data)
                unique_authors = len(set(c['author'] for c in commits_data))
                unique_repos = len(set(c['repo'] for c in commits_data))
                
                metrics = {
                    "–í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤": total_commits,
                    "–ê–≤—Ç–æ—Ä–æ–≤": unique_authors,
                    "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤": unique_repos,
                    "–ó–∞ –ø–µ—Ä–∏–æ–¥": period
                }
                
                display_metrics(metrics)
                
                # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∞–≤—Ç–æ—Ä–∞–º
                import pandas as pd
                import plotly.express as px
                
                df = pd.DataFrame(commits_data)
                author_stats = df['author'].value_counts().reset_index()
                author_stats.columns = ['author', 'commits']
                
                fig = px.bar(
                    author_stats, 
                    x='author', 
                    y='commits',
                    title="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –∞–≤—Ç–æ—Ä–∞–º"
                )
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("–ö–æ–º–º–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
    
    with tab2:
        st.subheader("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã")
        
        if 'commits_data' in locals() and commits_data:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–≤—Ç–æ—Ä—É
            if author_filter:
                filtered_commits = [c for c in commits_data if author_filter.lower() in c['author'].lower()]
            else:
                filtered_commits = commits_data
            
            for commit in filtered_commits[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20
                with st.expander(f"üìù {commit['hash']} | {commit['author']} | {commit['date']}"):
                    st.markdown(f"**–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:** {commit['repo']}")
                    st.markdown(f"**–ê–≤—Ç–æ—Ä:** {commit['author']}")
                    st.markdown(f"**–î–∞—Ç–∞:** {commit['date']}")
                    st.markdown(f"**–°–æ–æ–±—â–µ–Ω–∏–µ:** {commit['message']}")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π", key=f"diff_{commit['hash']}"):
                            st.info("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω diff –∫–æ–º–º–∏—Ç–∞")
                    
                    with col2:
                        if st.button(f"–ê–Ω–∞–ª–∏–∑ –ò–ò", key=f"ai_{commit['hash']}"):
                            st.info("–ò–ò –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–º–º–∏—Ç–µ")
        else:
            st.info("–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    with tab3:
        st.subheader("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò")
        
        if st.button("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary"):
            if 'commits_data' in locals() and commits_data:
                with st.spinner("–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."):
                    commits_text = "\n\n".join([
                        f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {c['repo']}\n"
                        f"–ê–≤—Ç–æ—Ä: {c['author']}\n" 
                        f"–î–∞—Ç–∞: {c['date']}\n"
                        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {c['message']}"
                        for c in commits_data[:10]  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                    ])
                    
                    @async_to_sync
                    async def analyze_commits():
                        return await llm_client.analyze_text(
                            commits_text,
                            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–∏—Ç–æ–≤. "
                            "–í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤, "
                            "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
                        )
                    
                    analysis = analyze_commits()
                    
                    st.subheader("üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
                    st.markdown(analysis)
            else:
                st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–º–∏—Ç–∞—Ö")
    
    with tab4:
        st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        
        if 'commits_data' in locals() and commits_data:
            import pandas as pd
            import plotly.express as px
            
            df = pd.DataFrame(commits_data)
            
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –¥–Ω—è–º
            daily_stats = df.groupby('date').size().reset_index()
            daily_stats.columns = ['date', 'commits']
            
            fig = px.line(
                daily_stats,
                x='date',
                y='commits', 
                title="–ö–æ–º–º–∏—Ç—ã –ø–æ –¥–Ω—è–º"
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # –¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤
            st.subheader("üèÜ –¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤")
            author_stats = df['author'].value_counts().head(10)
            st.bar_chart(author_stats)
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º
            st.subheader("üìÅ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º")
            repo_stats = df['repo'].value_counts()
            st.bar_chart(repo_stats)
        else:
            st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

if __name__ == "__main__":
    main()