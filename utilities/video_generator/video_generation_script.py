import os
import requests
import time

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
try:
    from config import API_KEY, MJ_URL, KL_URL, MJ_STATUS_URL, KL_STATUS_URL, HEADERS
except ImportError:
    print("–û—à–∏–±–∫–∞: –§–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ config.example.py –≤ config.py –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á")
    exit(1)

# ====== Prompts –¥–ª—è –ø–µ—Ä–≤—ã—Ö 20 —Å–µ–∫—É–Ω–¥ ======

keyframe_prompts = [
    # [00:00‚Äì00:10]
    "cinematic, pastel color palette, retro film grain, consistent wide-angle lens 24mm, soft golden northern light of Saint Petersburg, bright and cheerful, late-80s‚Äì00s Soviet apartment, surreal dynamic, sharp focus, lively expressive faces, no temporal artifacts, characters and cat must remain identical in every frame: red-haired girl in pink '–ö–†–£' T-shirt, plaid shorts, colourful socks leaps at sunrise in pastel-yellow Khrushchyovka kitchen with pale-blue cabinets, worn linoleum, tall window showing brick-roofed yards and domes; creamy cake in hand; tall boy with tousled black hair, round glasses, striped pajamas slides on slipper; chubby striped cat with blue collar stretches by metal bowl; backgrounds and outfits unchanged.",
    # [00:10‚Äì00:20]
    "cinematic, pastel color palette, retro film grain, consistent wide-angle lens 24mm, soft golden northern light of Saint Petersburg, bright and cheerful, late-80s‚Äì00s Soviet apartment, surreal dynamic, sharp focus, lively expressive faces, no temporal artifacts, characters and cat must remain identical in every frame: on the same pastel-yellow kitchen table under tall window to brick courtyards and domes, boy with tousled black hair, round glasses, striped pajamas balances red ball on bare foot while holding stickered electric guitar; red-haired girl in pink '–ö–†–£' T-shirt and plaid shorts raises a bright-blue ladle like a microphone; chubby striped cat with blue collar leaps by fairy lights and faded cartoon posters; kitchen layout, window view, outfits, and faces unchanged."
]

video_prompts = [
    # –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ –∫–∞–¥—Ä–∞ 1 –≤ –∫–∞–¥—Ä 2 (00:00‚Äì00:10 ‚Üí 00:10‚Äì00:20)
    "cinematic, pastel color palette, retro film grain, consistent wide-angle lens 24mm, soft golden northern light of Saint Petersburg, bright and cheerful, surreal dynamic, sharp focus, lively expressive faces, no temporal artifacts, characters and cat must remain identical in every frame: cake arcs through golden kitchen light, powdered sugar sparkles, spoons and flour swirl in slow-mo, boy glides across linoleum, cat weaves between feet, red ball rolls toward guitar; all backgrounds, outfits, and facial features remain constant, window view of brick yards and cathedral silhouette present."
]

def check_status(request_id, status_url, max_wait_time=300):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    """
    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (request_id: {request_id})...")
    
    start_time = time.time()
    while time.time() - start_time < max_wait_time:
        try:
            payload = {"request_id": request_id}
            r = requests.post(status_url, headers=HEADERS, json=payload, timeout=30)
            
            if r.status_code == 502:
                print(f"‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (502). –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                time.sleep(10)
                continue
                
            if r.status_code == 503:
                print(f"‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (503). –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
                time.sleep(15)
                continue
                
            r.raise_for_status()
            response_data = r.json()
            
            print(f"üìä –°—Ç–∞—Ç—É—Å: {response_data.get('status', 'unknown')}")
            
            if response_data.get('status') == 'completed':
                print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                return response_data
            elif response_data.get('status') == 'failed':
                print(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {response_data.get('error', 'Unknown error')}")
                return None
            elif response_data.get('status') == 'processing':
                print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞... (–ø—Ä–æ—à–ª–æ {int(time.time() - start_time)}—Å)")
                time.sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            else:
                print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response_data}")
                time.sleep(10)
                
        except requests.exceptions.RequestException as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            time.sleep(10)
    
    print(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ({max_wait_time}—Å)")
    return None

def upload_image_to_temp_service(img_file):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL
    –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º base64 data URL
    """
    try:
        import base64
        
        with open(img_file, "rb") as f:
            img_data = f.read()
        
        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        img_base64 = base64.b64encode(img_data).decode('utf-8')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
        ext = img_file.lower().split('.')[-1]
        mime_type = {
            'png': 'image/png',
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'gif': 'image/gif',
            'webp': 'image/webp'
        }.get(ext, 'image/png')
        
        # –°–æ–∑–¥–∞–µ–º data URL
        data_url = f"data:{mime_type};base64,{img_base64}"
        
        print(f"üì§ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –≤ base64 data URL")
        return data_url
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def generate_keyframe(prompt, idx):
    payload = {
        "prompt": prompt,
        "width": 1024,
        "height": 1024
    }
    
    try:
        print(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞–¥—Ä–∞ {idx+1}...")
        r = requests.post(MJ_URL, headers=HEADERS, json=payload, timeout=30)
        
        if r.status_code == 502:
            print(f"‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (502). –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
            r = requests.post(MJ_URL, headers=HEADERS, json=payload, timeout=30)
        
        if r.status_code == 503:
            print(f"‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (503). –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)
            r = requests.post(MJ_URL, headers=HEADERS, json=payload, timeout=30)
        
        r.raise_for_status()
        response_data = r.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ request_id
        if "request_id" not in response_data:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API: {response_data}")
            return None
        
        request_id = response_data["request_id"]
        print(f"üìã –ü–æ–ª—É—á–µ–Ω request_id: {request_id}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        result = check_status(request_id, MJ_STATUS_URL)
        if not result:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–¥—Ä–∞ {idx+1}")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if "data" in result and len(result["data"]) > 0:
            url = result["data"][0]["url"]
        elif "url" in result:
            url = result["url"]
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result}")
            return None
            
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        img_data = requests.get(url).content
        fname = f"frame_{idx+1:02d}.png"
        with open(fname, "wb") as f:
            f.write(img_data)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω {fname}")
        return fname
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–¥—Ä–∞ {idx+1}: {e}")
        return None

def generate_video_segment(img_file, prompt, idx):
    try:
        print(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ {idx+1}...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º URL
        img_url = upload_image_to_temp_service(img_file)
        if not img_url:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {img_file}")
            return None
        
        payload = {
            "prompt": prompt,
            "duration": 10,
            "input_image_urls": [img_url]
        }
        
        r = requests.post(KL_URL, headers=HEADERS, json=payload, timeout=30)
        
        if r.status_code == 502:
            print(f"‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (502). –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
            r = requests.post(KL_URL, headers=HEADERS, json=payload, timeout=30)
        
        if r.status_code == 503:
            print(f"‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (503). –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)
            r = requests.post(KL_URL, headers=HEADERS, json=payload, timeout=30)
        
        r.raise_for_status()
        response_data = r.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ request_id
        if "request_id" not in response_data:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API: {response_data}")
            return None
        
        request_id = response_data["request_id"]
        print(f"üìã –ü–æ–ª—É—á–µ–Ω request_id: {request_id}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        result = check_status(request_id, KL_STATUS_URL)
        if not result:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ {idx+1}")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º URL –≤–∏–¥–µ–æ
        if "data" in result and len(result["data"]) > 0:
            url = result["data"][0]["url"]
        elif "url" in result:
            url = result["url"]
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result}")
            return None
            
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...")
        vid_data = requests.get(url).content
        vname = f"segment_{idx+1:02d}.mp4"
        with open(vname, "wb") as f:
            f.write(vid_data)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω {vname}")
        return vname
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ {idx+1}: {e}")
        return None

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏...")
    print(f"üì° Midjourney API: {MJ_URL}")
    print(f"üì° Kling API: {KL_URL}")
    print("=" * 50)
    
    image_files = []
    video_files = []

    # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –∫–ª—é—á–µ–≤—ã—Ö –∫–∞–¥—Ä–æ–≤
    print("\nüé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∫–∞–¥—Ä–æ–≤...")
    for i, prompt in enumerate(keyframe_prompts):
        print(f"\nüì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–¥—Ä–∞ {i+1}/2...")
        fname = generate_keyframe(prompt, i)
        if fname:
            image_files.append(fname)
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞–¥—Ä {i+1}")
        time.sleep(2)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit

    # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 20 —Å–µ–∫
    if image_files:
        print(f"\nüé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∫–∞–¥—Ä–∞ {image_files[0]}...")
        video_file = generate_video_segment(image_files[0], video_prompts[0], 0)
        if video_file:
            video_files.append(video_file)
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ")
    else:
        print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ")

    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã: {len(image_files)}")
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ: {len(video_files)}")
    
    if image_files:
        print(f"üìÅ –ö–∞–¥—Ä—ã: {image_files}")
    if video_files:
        print(f"üìÅ –í–∏–¥–µ–æ: {video_files}")

if __name__ == "__main__":
    main()