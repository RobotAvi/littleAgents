"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ Grafana, –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö.
"""

import streamlit as st
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from shared.llm_client import llm_client
from shared.config import Config
from shared.utils import (
    create_streamlit_header, display_metrics, 
    display_data_table, send_notification, 
    validate_config, async_to_sync
)
from datetime import datetime, timedelta
import random

def main():
    create_streamlit_header(
        "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã", 
        "–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ Grafana –∏ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã"
    )
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = Config.get_utility_config('infrastructure_monitor')
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        data_sources = st.multiselect(
            "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:",
            ["Grafana", "Prometheus", "–õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", "–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"],
            default=["Grafana", "–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"]
        )
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        time_range = st.selectbox(
            "–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
            ["–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤", "–°—É—Ç–∫–∏", "–ù–µ–¥–µ–ª—è"],
            index=1
        )
        
        # –£—Ä–æ–≤–µ–Ω—å –∞–ª–µ—Ä—Ç–æ–≤
        alert_level = st.selectbox(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–ª–µ—Ä—Ç–æ–≤:",
            ["–í—Å–µ", "Warning", "Error", "Critical"],
            index=1
        )
        
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏", type="primary"):
            st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìä –î–∞—à–±–æ—Ä–¥", "üö® –ê–ª–µ—Ä—Ç—ã", "üìà –ú–µ—Ç—Ä–∏–∫–∏", "ü§ñ –ò–ò –ê–Ω–∞–ª–∏–∑"
    ])
    
    with tab1:
        st.subheader("üìä –û–±–∑–æ—Ä –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫..."):
            # –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            system_metrics = {
                "CPU Usage": random.uniform(20, 80),
                "Memory Usage": random.uniform(30, 70), 
                "Disk Usage": random.uniform(40, 85),
                "Network I/O": random.uniform(10, 90)
            }
            
            # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
            services_status = [
                {"name": "Web Server", "status": "healthy", "uptime": "99.9%"},
                {"name": "Database", "status": "healthy", "uptime": "99.8%"},
                {"name": "Cache", "status": "warning", "uptime": "98.5%"},
                {"name": "API Gateway", "status": "healthy", "uptime": "99.7%"}
            ]
            
            # –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("CPU", f"{system_metrics['CPU Usage']:.1f}%", "2.3%")
            with col2:
                st.metric("Memory", f"{system_metrics['Memory Usage']:.1f}%", "-1.2%")
            with col3:
                st.metric("Disk", f"{system_metrics['Disk Usage']:.1f}%", "0.5%")
            with col4:
                st.metric("Network", f"{system_metrics['Network I/O']:.1f}%", "5.1%")
            
            # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
            st.subheader("üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤")
            
            for service in services_status:
                col1, col2, col3 = st.columns([2, 1, 1])
                
                with col1:
                    st.write(f"**{service['name']}**")
                
                with col2:
                    if service['status'] == 'healthy':
                        st.success("‚úÖ Healthy")
                    elif service['status'] == 'warning':
                        st.warning("‚ö†Ô∏è Warning")
                    else:
                        st.error("‚ùå Error")
                
                with col3:
                    st.write(f"Uptime: {service['uptime']}")
            
            # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
            st.subheader("üìà –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
            
            import pandas as pd
            import plotly.express as px
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            hours = list(range(24))
            cpu_data = [random.uniform(20, 80) for _ in hours]
            memory_data = [random.uniform(30, 70) for _ in hours]
            
            df = pd.DataFrame({
                'hour': hours * 2,
                'value': cpu_data + memory_data,
                'metric': ['CPU'] * 24 + ['Memory'] * 24
            })
            
            fig = px.line(
                df,
                x='hour',
                y='value',
                color='metric',
                title="–ó–∞–≥—Ä—É–∑–∫–∞ CPU –∏ Memory –∑–∞ 24 —á–∞—Å–∞"
            )
            st.plotly_chart(fig, use_container_width=True)
    
    with tab2:
        st.subheader("üö® –ê–ª–µ—Ä—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤
        alerts = [
            {
                "timestamp": datetime.now() - timedelta(minutes=15),
                "level": "warning",
                "source": "Grafana",
                "message": "High memory usage on server-01",
                "value": "75%"
            },
            {
                "timestamp": datetime.now() - timedelta(hours=1),
                "level": "error", 
                "source": "Application",
                "message": "Database connection timeout",
                "value": "5s"
            },
            {
                "timestamp": datetime.now() - timedelta(hours=2),
                "level": "critical",
                "source": "System",
                "message": "Disk space critically low",
                "value": "95%"
            }
        ]
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤
        if alert_level != "–í—Å–µ":
            filtered_alerts = [a for a in alerts if a['level'] == alert_level.lower()]
        else:
            filtered_alerts = alerts
        
        for alert in filtered_alerts:
            level_color = {
                'warning': 'warning',
                'error': 'error', 
                'critical': 'error'
            }
            
            level_icon = {
                'warning': '‚ö†Ô∏è',
                'error': 'üî¥',
                'critical': 'üö®'
            }
            
            with st.expander(
                f"{level_icon[alert['level']]} {alert['message']} | "
                f"{alert['timestamp'].strftime('%H:%M')}"
            ):
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.markdown(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {alert['source']}")
                    st.markdown(f"**–í—Ä–µ–º—è:** {alert['timestamp']}")
                    st.markdown(f"**–°–æ–æ–±—â–µ–Ω–∏–µ:** {alert['message']}")
                    st.markdown(f"**–ó–Ω–∞—á–µ–Ω–∏–µ:** {alert['value']}")
                
                with col2:
                    if st.button(f"–ò—Å–ø—Ä–∞–≤–∏—Ç—å", key=f"fix_{id(alert)}"):
                        st.success("–ö–æ–º–∞–Ω–¥–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                    
                    if st.button(f"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", key=f"ignore_{id(alert)}"):
                        st.info("–ê–ª–µ—Ä—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω")
    
    with tab3:
        st.subheader("üìà –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        
        # –í—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        selected_metrics = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏:",
            ["CPU Usage", "Memory Usage", "Disk I/O", "Network Traffic", "Response Time"],
            default=["CPU Usage", "Memory Usage"]
        )
        
        if selected_metrics:
            import pandas as pd
            import plotly.graph_objects as go
            from plotly.subplots import make_subplots
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            time_points = pd.date_range(
                start=datetime.now() - timedelta(hours=6),
                end=datetime.now(),
                freq='5T'
            )
            
            fig = make_subplots(
                rows=len(selected_metrics),
                cols=1,
                subplot_titles=selected_metrics,
                shared_xaxes=True
            )
            
            for i, metric in enumerate(selected_metrics):
                values = [random.uniform(20, 80) for _ in time_points]
                
                fig.add_trace(
                    go.Scatter(
                        x=time_points,
                        y=values,
                        name=metric,
                        mode='lines'
                    ),
                    row=i+1,
                    col=1
                )
            
            fig.update_layout(height=400 * len(selected_metrics))
            st.plotly_chart(fig, use_container_width=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        st.subheader("üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        metrics_data = []
        for metric in selected_metrics:
            metrics_data.append({
                "–ú–µ—Ç—Ä–∏–∫–∞": metric,
                "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": f"{random.uniform(30, 70):.1f}%",
                "–°—Ä–µ–¥–Ω–µ–µ –∑–∞ —á–∞—Å": f"{random.uniform(25, 65):.1f}%",
                "–ú–∞–∫—Å–∏–º—É–º": f"{random.uniform(70, 90):.1f}%",
                "–°—Ç–∞—Ç—É—Å": "–ù–æ—Ä–º–∞" if random.random() > 0.3 else "–í–Ω–∏–º–∞–Ω–∏–µ"
            })
        
        if metrics_data:
            display_data_table(pd.DataFrame(metrics_data))
    
    with tab4:
        st.subheader("ü§ñ –ò–ò –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        
        if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã", type="primary"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –∏ –ª–æ–≥–æ–≤..."):
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                analysis_data = f"""
                –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã:
                - CPU: {system_metrics['CPU Usage']:.1f}%
                - Memory: {system_metrics['Memory Usage']:.1f}%
                - Disk: {system_metrics['Disk Usage']:.1f}%
                - Network: {system_metrics['Network I/O']:.1f}%
                
                –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:
                {chr(10).join([f"- {s['name']}: {s['status']} ({s['uptime']})" for s in services_status])}
                
                –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã: {len(alerts)}
                """
                
                @async_to_sync
                async def analyze_infrastructure():
                    return await llm_client.analyze_text(
                        analysis_data,
                        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã. "
                        "–í—ã–¥–µ–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Ä–∏—Å–∫–∏, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏. "
                        "–ü—Ä–µ–¥–ª–æ–∂–∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏."
                    )
                
                analysis = analyze_infrastructure()
                
                st.subheader("üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
                st.markdown(analysis)
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                st.subheader("üí° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                
                recommendations = []
                if system_metrics['CPU Usage'] > 70:
                    recommendations.append("üîß –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ")
                if system_metrics['Memory Usage'] > 80:
                    recommendations.append("üíæ –ö—Ä–∏—Ç–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ - –æ—Å–≤–æ–±–æ–¥–∏—Ç–µ —Ä–µ—Å—É—Ä—Å—ã")
                if any(s['status'] != 'healthy' for s in services_status):
                    recommendations.append("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ")
                
                for rec in recommendations:
                    st.warning(rec)

if __name__ == "__main__":
    main()