"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –≤—Å—Ç—Ä–µ—á–∞–º
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.
"""

import streamlit as st
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from shared.llm_client import llm_client
from shared.config import Config
from shared.utils import (
    create_streamlit_header, display_metrics, 
    validate_config, async_to_sync
)
from datetime import datetime, timedelta

def main():
    create_streamlit_header(
        "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—Å—Ç—Ä–µ—á–∞–º", 
        "–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—Å—Ç—Ä–µ—á –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"
    )
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ü–µ—Ä–∏–æ–¥ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
        prep_period = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
            ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–≠—Ç–∞ –Ω–µ–¥–µ–ª—è", "–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"],
            index=0
        )
        
        # –¢–∏–ø—ã –≤—Å—Ç—Ä–µ—á
        meeting_types = st.multiselect(
            "–¢–∏–ø—ã –≤—Å—Ç—Ä–µ—á:",
            ["–ü–ª–∞–Ω–µ—Ä–∫–∏", "1:1", "–î–µ–º–æ", "–†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—ã", "–ò–Ω—Ç–µ—Ä–≤—å—é"],
            default=["–ü–ª–∞–Ω–µ—Ä–∫–∏", "1:1"]
        )
        
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
            st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìÖ –í—Å—Ç—Ä–µ—á–∏", "üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "üìÑ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã", "ü§ñ –ò–ò –ü–æ–º–æ—â—å"
    ])
    
    with tab1:
        st.subheader("üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
        meetings = [
            {
                "title": "Weekly Planning",
                "time": datetime.now() + timedelta(hours=2),
                "duration": 60,
                "participants": ["Team Lead", "Developer 1", "Developer 2"],
                "type": "–ü–ª–∞–Ω–µ—Ä–∫–∏"
            },
            {
                "title": "1:1 —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
                "time": datetime.now() + timedelta(days=1),
                "duration": 30,
                "participants": ["Manager"],
                "type": "1:1"
            }
        ]
        
        for i, meeting in enumerate(meetings):
            with st.expander(f"üìÖ {meeting['title']} | {meeting['time'].strftime('%d.%m %H:%M')}"):
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.markdown(f"**–í—Ä–µ–º—è:** {meeting['time'].strftime('%d.%m.%Y %H:%M')}")
                    st.markdown(f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {meeting['duration']} –º–∏–Ω")
                    st.markdown(f"**–£—á–∞—Å—Ç–Ω–∏–∫–∏:** {', '.join(meeting['participants'])}")
                    st.markdown(f"**–¢–∏–ø:** {meeting['type']}")
                
                with col2:
                    if st.button(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è", key=f"prep_{i}"):
                        st.success("–°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏!")
    
    with tab2:
        st.subheader("üìã –ü–ª–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏")
        
        if st.button("üéØ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏", type="primary"):
            with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞..."):
                st.subheader("üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
                
                checklist = [
                    "üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–µ–∫—Ç—É",
                    "üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ç—Ä–µ–∫–µ—Ä–µ",
                    "üìà –°–æ–±—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                    "üí¨ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–¥–±–µ–∫ –æ—Ç –∫–æ–º–∞–Ω–¥—ã",
                    "üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"
                ]
                
                for item in checklist:
                    checked = st.checkbox(item, key=f"check_{item}")
                
                if st.button("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π"):
                    st.success("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—Å—Ç—Ä–µ—á–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    with tab3:
        st.subheader("üìÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏")
        
        # –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        with st.form("add_artifact"):
            st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç")
            
            artifact_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ:")
            artifact_type = st.selectbox("–¢–∏–ø:", ["–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", "–î–æ–∫—É–º–µ–Ω—Ç", "–¢–∞–±–ª–∏—Ü–∞", "–ö–æ–¥"])
            artifact_priority = st.selectbox("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", ["–í—ã—Å–æ–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–ù–∏–∑–∫–∏–π"])
            
            if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç"):
                if artifact_name:
                    st.success(f"–ê—Ä—Ç–µ—Ñ–∞–∫—Ç '{artifact_name}' –¥–æ–±–∞–≤–ª–µ–Ω!")
        
        # –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        st.subheader("üìö –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
        artifacts = [
            {"name": "–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É", "type": "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", "status": "–ì–æ—Ç–æ–≤"},
            {"name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "type": "–î–æ–∫—É–º–µ–Ω—Ç", "status": "–í —Ä–∞–±–æ—Ç–µ"}
        ]
        
        for artifact in artifacts:
            col1, col2, col3 = st.columns([2, 1, 1])
            
            with col1:
                st.write(f"**{artifact['name']}**")
            with col2:
                st.write(artifact['type'])
            with col3:
                if artifact['status'] == '–ì–æ—Ç–æ–≤':
                    st.success("‚úÖ –ì–æ—Ç–æ–≤")
                else:
                    st.warning("‚è≥ –í —Ä–∞–±–æ—Ç–µ")
    
    with tab4:
        st.subheader("ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤—Å—Ç—Ä–µ—á")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–≤–µ—Å—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á–∏
        st.subheader("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–≤–µ—Å—Ç–∫–∏")
        
        with st.form("meeting_agenda"):
            meeting_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:")
            meeting_purpose = st.text_area("–¶–µ–ª—å –≤—Å—Ç—Ä–µ—á–∏:")
            meeting_participants = st.text_input("–£—á–∞—Å—Ç–Ω–∏–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
            meeting_duration = st.number_input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω):", min_value=15, max_value=240, value=60)
            
            if st.form_submit_button("ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ—Å—Ç–∫—É"):
                if meeting_title and meeting_purpose:
                    with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–≤–µ—Å—Ç–∫–∏..."):
                        meeting_info = {
                            'title': meeting_title,
                            'purpose': meeting_purpose,
                            'participants': meeting_participants.split(',') if meeting_participants else [],
                            'duration': f"{meeting_duration} –º–∏–Ω—É—Ç"
                        }
                        
                        @async_to_sync
                        async def generate_agenda():
                            return await llm_client.generate_meeting_agenda(meeting_info)
                        
                        agenda = generate_agenda()
                        
                        st.subheader("üìã –ü–æ–≤–µ—Å—Ç–∫–∞ –≤—Å—Ç—Ä–µ—á–∏")
                        st.markdown(agenda)

if __name__ == "__main__":
    main()