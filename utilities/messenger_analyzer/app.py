"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram, –≤—ã–¥–µ–ª—è–µ—Ç –≤–∞–∂–Ω—ã–µ, —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫–∏ –∏ –∑–∞–¥–∞—á–∏.
"""

import streamlit as st
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from shared.llm_client import llm_client
from shared.config import Config
from shared.utils import (
    create_streamlit_header, display_metrics, 
    display_data_table, send_notification, 
    validate_config, async_to_sync
)
from datetime import datetime, timedelta
import json

def main():
    create_streamlit_header(
        "–ê–Ω–∞–ª–∏–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤", 
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —Å –ø–æ–º–æ—â—å—é –ò–ò"
    )
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = Config.get_utility_config('messenger_analyzer')
    required_keys = ['telegram_bot_token', 'openai_api_key']
    
    if not validate_config(config, required_keys):
        st.stop()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
        period = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:",
            ["–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å", "–°–µ–≥–æ–¥–Ω—è", "–í—á–µ—Ä–∞", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è"],
            index=1
        )
        
        # –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        message_limit = st.slider("–ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π:", 10, 100, 50)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —á–∞—Ç–∞–º
        chat_filter = st.multiselect(
            "–§–∏–ª—å—Ç—Ä –ø–æ —á–∞—Ç–∞–º:",
            ["–†–∞–±–æ—á–∏–µ –≥—Ä—É–ø–ø—ã", "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", "–ö–∞–Ω–∞–ª—ã", "–ë–æ—Ç—ã"],
            default=["–†–∞–±–æ—á–∏–µ –≥—Ä—É–ø–ø—ã", "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"]
        )
        
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
            st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìä –û–±–∑–æ—Ä", "üí¨ –°–æ–æ–±—â–µ–Ω–∏—è", "ü§ñ –ò–ò –ê–Ω–∞–ª–∏–∑", "üìã –ó–∞–¥–∞—á–∏"
    ])
    
    with tab1:
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API Telegram)
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π..."):
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram API
            messages = [
                {
                    'id': 1, 'from': '–ö–æ–ª–ª–µ–≥–∞ 1', 'text': '–ù—É–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–µ–∫—Ç',
                    'timestamp': datetime.now() - timedelta(hours=1),
                    'chat_type': 'personal', 'priority': 'high'
                },
                {
                    'id': 2, 'from': '–†–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞', 'text': '–í—Å—Ç—Ä–µ—á–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞',
                    'timestamp': datetime.now() - timedelta(hours=2),
                    'chat_type': 'group', 'priority': 'medium'
                }
            ]
            
            if messages:
                # –ú–µ—Ç—Ä–∏–∫–∏
                total_messages = len(messages)
                unread_messages = len([m for m in messages if m.get('unread', True)])
                high_priority = len([m for m in messages if m.get('priority') == 'high'])
                
                metrics = {
                    "–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π": total_messages,
                    "–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö": unread_messages,
                    "–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç": high_priority,
                    "–ó–∞ –ø–µ—Ä–∏–æ–¥": period
                }
                
                display_metrics(metrics)
                
                # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                st.subheader("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
                import pandas as pd
                import plotly.express as px
                
                df = pd.DataFrame(messages)
                hourly_stats = df.groupby(df['timestamp'].dt.hour).size().reset_index()
                hourly_stats.columns = ['hour', 'count']
                
                fig = px.bar(
                    hourly_stats, 
                    x='hour', 
                    y='count',
                    title="–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å–∞–º"
                )
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    with tab2:
        st.subheader("üí¨ –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        if 'messages' in locals() and messages:
            for i, msg in enumerate(messages):
                with st.expander(
                    f"üí¨ {msg['from']} | {msg['timestamp'].strftime('%H:%M')} | "
                    f"{'üî¥' if msg.get('priority') == 'high' else 'üü°'}"
                ):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.markdown(f"**–û—Ç:** {msg['from']}")
                        st.markdown(f"**–í—Ä–µ–º—è:** {msg['timestamp']}")
                        st.markdown(f"**–°–æ–æ–±—â–µ–Ω–∏–µ:** {msg['text']}")
                    
                    with col2:
                        if st.button(f"–û—Ç–≤–µ—Ç–∏—Ç—å #{i}", key=f"reply_{i}"):
                            st.success("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                        
                        if st.button(f"–í–∞–∂–Ω–æ–µ #{i}", key=f"important_{i}"):
                            st.success("–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤–∞–∂–Ω–æ–µ!")
        else:
            st.info("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    with tab3:
        st.subheader("ü§ñ –ò–ò –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", type="primary"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π..."):
                
                @async_to_sync
                async def analyze_messages():
                    return await llm_client.analyze_telegram_messages(messages if 'messages' in locals() else [])
                
                analysis = analyze_messages()
                
                st.subheader("üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
                st.markdown(analysis)
    
    with tab4:
        st.subheader("üìã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏")
        
        st.markdown("""
        **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π:**
        
        1. üí¨ –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        2. üéØ –í—ã—è–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–±—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è
        3. üìã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
        4. üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        """)

if __name__ == "__main__":
    main()