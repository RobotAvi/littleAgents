"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º
"""

import streamlit as st
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from shared.llm_client import llm_client
from shared.config import Config
from shared.utils import (
    create_streamlit_header, display_metrics, 
    display_data_table, send_notification, 
    validate_config, async_to_sync
)
from datetime import datetime, timedelta
import json

def main():
    create_streamlit_header(
        "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –≤—Å—Ç—Ä–µ—á–∏", 
        "–ê–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—Å—Ç—Ä–µ—á–∞–º"
    )
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = Config.get_utility_config('calendar_manager')
    required_keys = ['openai_api_key']
    
    if not validate_config(config, required_keys):
        st.stop()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
        period = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:",
            ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–≠—Ç–∞ –Ω–µ–¥–µ–ª—è", "–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", "–≠—Ç–æ—Ç –º–µ—Å—è—Ü"],
            index=0
        )
        
        # –¢–∏–ø —Å–æ–±—ã—Ç–∏–π
        event_type = st.multiselect(
            "–¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π:",
            ["–í—Å—Ç—Ä–µ—á–∏", "–°–æ–∑–≤–æ–Ω—ã", "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏", "–ò–Ω—Ç–µ—Ä–≤—å—é", "–õ–∏—á–Ω—ã–µ"],
            default=["–í—Å—Ç—Ä–µ—á–∏", "–°–æ–∑–≤–æ–Ω—ã"]
        )
        
        # –ö–∞–ª–µ–Ω–¥–∞—Ä–∏
        calendars = st.multiselect(
            "–ö–∞–ª–µ–Ω–¥–∞—Ä–∏:",
            ["–†–∞–±–æ—á–∏–π", "–õ–∏—á–Ω—ã–π", "–ü—Ä–æ–µ–∫—Ç—ã", "–ö–æ–º–∞–Ω–¥–Ω—ã–π"],
            default=["–†–∞–±–æ—á–∏–π"]
        )
        
        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        auto_refresh = st.checkbox("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω", False)
        
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
            st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìä –û–±–∑–æ—Ä", "üìÖ –°–æ–±—ã—Ç–∏—è", "ü§ñ –ò–ò –ê–Ω–∞–ª–∏–∑", "üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞"
    ])
    
    with tab1:
        st.subheader("üìä –û–±–∑–æ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π (–¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ)
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è..."):
            events = get_demo_events(period)
            
            if events:
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º
                filtered_events = [e for e in events if e.get('type', '–í—Å—Ç—Ä–µ—á–∏') in event_type]
                
                # –ú–µ—Ç—Ä–∏–∫–∏
                total_events = len(filtered_events)
                today_events = len([e for e in filtered_events if is_today(e.get('start_time'))])
                upcoming_events = len([e for e in filtered_events if is_upcoming(e.get('start_time'))])
                
                metrics = {
                    "–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π": total_events,
                    "–°–µ–≥–æ–¥–Ω—è": today_events,
                    "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö": upcoming_events,
                    "–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è": calculate_free_time(filtered_events)
                }
                
                display_metrics(metrics)
                
                # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
                st.subheader("üìà –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º")
                
                import pandas as pd
                import plotly.express as px
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                daily_stats = {}
                for event in filtered_events:
                    if event.get('start_time'):
                        try:
                            event_date = datetime.fromisoformat(event['start_time']).date()
                            date_str = event_date.strftime('%Y-%m-%d')
                            
                            if date_str not in daily_stats:
                                daily_stats[date_str] = {
                                    'date': date_str,
                                    'events': 0,
                                    'hours': 0
                                }
                            
                            daily_stats[date_str]['events'] += 1
                            daily_stats[date_str]['hours'] += event.get('duration', 1)
                        except:
                            continue
                
                if daily_stats:
                    df = pd.DataFrame(list(daily_stats.values()))
                    
                    fig = px.bar(
                        df, 
                        x='date', 
                        y='events',
                        title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –ø–æ –¥–Ω—è–º",
                        labels={'date': '–î–∞—Ç–∞', 'events': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π'}
                    )
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ —á–∞—Å–∞–º
                    fig2 = px.bar(
                        df, 
                        x='date', 
                        y='hours',
                        title="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º",
                        labels={'date': '–î–∞—Ç–∞', 'hours': '–ß–∞—Å—ã'}
                    )
                    st.plotly_chart(fig2, use_container_width=True)
            else:
                st.info("–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
    
    with tab2:
        st.subheader("üìÖ –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π")
        
        if 'events' in locals() and events:
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            sorted_events = sorted(events, key=lambda x: x.get('start_time', ''))
            
            for i, event in enumerate(sorted_events):
                with st.expander(
                    f"üìÖ {event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} | "
                    f"{format_event_time(event)} | "
                    f"üë• {len(event.get('participants', []))} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                ):
                    col1, col2 = st.columns([2, 1])
                    
                    with col1:
                        st.markdown(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        st.markdown(f"**–í—Ä–µ–º—è:** {format_event_time(event)}")
                        st.markdown(f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {event.get('duration', 1)} —á–∞—Å(–∞)")
                        
                        # –£—á–∞—Å—Ç–Ω–∏–∫–∏
                        participants = event.get('participants', [])
                        if participants:
                            st.markdown(f"**–£—á–∞—Å—Ç–Ω–∏–∫–∏:** {', '.join(participants)}")
                        
                        # –û–ø–∏—Å–∞–Ω–∏–µ
                        description = event.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                        st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {description}")
                        
                        # –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
                        location = event.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                        st.markdown(f"**–ú–µ—Å—Ç–æ:** {location}")
                    
                    with col2:
                        # –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
                        event_type_badge = get_event_type_badge(event.get('type', '–í—Å—Ç—Ä–µ—á–∏'))
                        st.markdown(f"**–¢–∏–ø:** {event_type_badge}", unsafe_allow_html=True)
                        
                        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                        priority = event.get('priority', 'medium')
                        priority_icon = "üî¥" if priority == 'high' else "üü°" if priority == 'medium' else "üü¢"
                        st.markdown(f"**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {priority_icon} {priority.title()}")
                        
                        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
                        prepared = event.get('prepared', False)
                        prep_status = "‚úÖ –ì–æ—Ç–æ–≤–æ" if prepared else "‚è≥ –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"
                        st.markdown(f"**–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞:** {prep_status}")
                        
                        # –î–µ–π—Å—Ç–≤–∏—è
                        if st.button(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å #{i}", key=f"prep_{i}"):
                            st.success("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
                            
                        if st.button(f"üìù –ó–∞–º–µ—Ç–∫–∏ #{i}", key=f"notes_{i}"):
                            st.info("–û—Ç–∫—Ä—ã—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∫ –≤—Å—Ç—Ä–µ—á–µ")
        else:
            st.info("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    with tab3:
        st.subheader("ü§ñ –ò–ò –ê–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
        
        if 'events' in locals() and events:
            if st.button("üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", type="primary"):
                with st.spinner("–ê–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –ø–æ–º–æ—â—å—é –ò–ò..."):
                    
                    @async_to_sync
                    async def analyze_calendar():
                        return await llm_client.analyze_calendar_events(events)
                    
                    analysis = analyze_calendar()
                    
                    st.subheader("üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
                    st.markdown(analysis)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                    
                    recommendations = generate_recommendations(events)
                    for rec in recommendations:
                        st.info(rec)
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑"):
                        from shared.utils import save_json_data
                        
                        analysis_data = {
                            'timestamp': datetime.now().isoformat(),
                            'period': period,
                            'total_events': len(events),
                            'analysis': analysis,
                            'recommendations': recommendations
                        }
                        
                        save_json_data(analysis_data, f"calendar_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json")
                        st.success("–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        else:
            st.info("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
    
    with tab4:
        st.subheader("üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—Å—Ç—Ä–µ—á–∞–º")
        
        st.markdown("""
        **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—Å—Ç—Ä–µ—á–∞–º:**
        
        1. üìÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
        2. üìö –°–±–æ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        3. üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≤–µ—Å—Ç–∫–∏ –¥–Ω—è
        4. üë• –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        """)
        
        # –°–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
        if 'events' in locals() and events:
            unprepared_events = [e for e in events if not e.get('prepared', False)]
            
            if unprepared_events:
                st.subheader("‚è≥ –¢—Ä–µ–±—É—é—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏")
                
                for i, event in enumerate(unprepared_events):
                    with st.container():
                        col1, col2, col3 = st.columns([3, 1, 1])
                        
                        with col1:
                            st.markdown(f"**{event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**")
                            st.caption(f"{format_event_time(event)} | {len(event.get('participants', []))} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                        
                        with col2:
                            if st.button(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å", key=f"prepare_{i}"):
                                prepare_meeting(event)
                        
                        with col3:
                            if st.button(f"üìù –ü–æ–≤–µ—Å—Ç–∫–∞", key=f"agenda_{i}"):
                                create_agenda(event)
                        
                        st.divider()
            else:
                st.success("–í—Å–µ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã!")
        
        # –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        with st.form("new_event"):
            st.subheader("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ")
            
            event_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
            event_date = st.date_input("–î–∞—Ç–∞:")
            event_time = st.time_input("–í—Ä–µ–º—è:")
            event_duration = st.slider("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á–∞—Å—ã):", 0.5, 8.0, 1.0, 0.5)
            event_participants = st.text_area("–£—á–∞—Å—Ç–Ω–∏–∫–∏ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):")
            event_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ:")
            
            if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"):
                if event_title:
                    new_event = {
                        'title': event_title,
                        'start_time': datetime.combine(event_date, event_time).isoformat(),
                        'duration': event_duration,
                        'participants': event_participants.split('\n') if event_participants else [],
                        'description': event_description
                    }
                    st.success(f"–°–æ–±—ã—Ç–∏–µ '{event_title}' —Å–æ–∑–¥–∞–Ω–æ!")
                else:
                    st.error("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")

def get_demo_events(period):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–º–æ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    base_time = datetime.now()
    
    if period == "–°–µ–≥–æ–¥–Ω—è":
        start_date = base_time.date()
        end_date = start_date
    elif period == "–ó–∞–≤—Ç—Ä–∞":
        start_date = (base_time + timedelta(days=1)).date()
        end_date = start_date
    elif period == "–≠—Ç–∞ –Ω–µ–¥–µ–ª—è":
        start_date = base_time.date()
        end_date = start_date + timedelta(days=7)
    elif period == "–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è":
        start_date = (base_time + timedelta(days=7)).date()
        end_date = start_date + timedelta(days=7)
    else:  # –≠—Ç–æ—Ç –º–µ—Å—è—Ü
        start_date = base_time.date()
        end_date = start_date + timedelta(days=30)
    
    # –î–µ–º–æ —Å–æ–±—ã—Ç–∏—è
    demo_events = [
        {
            'title': '–ü–ª–∞–Ω–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã',
            'start_time': (datetime.combine(start_date, datetime.min.time()) + timedelta(hours=9)).isoformat(),
            'duration': 1,
            'participants': ['–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤', '–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞'],
            'description': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø–ª–∞–Ω–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
            'location': '–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª –ê',
            'type': '–í—Å—Ç—Ä–µ—á–∏',
            'priority': 'medium',
            'prepared': True
        },
        {
            'title': '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É',
            'start_time': (datetime.combine(start_date, datetime.min.time()) + timedelta(hours=14)).isoformat(),
            'duration': 2,
            'participants': ['–î–∏—Ä–µ–∫—Ç–æ—Ä', '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞', '–ö–ª–∏–µ–Ω—Ç'],
            'description': '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞',
            'location': 'Online (Zoom)',
            'type': '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏',
            'priority': 'high',
            'prepared': False
        },
        {
            'title': '–ò–Ω—Ç–µ—Ä–≤—å—é —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º',
            'start_time': (datetime.combine(start_date + timedelta(days=1), datetime.min.time()) + timedelta(hours=11)).isoformat(),
            'duration': 1.5,
            'participants': ['HR –º–µ–Ω–µ–¥–∂–µ—Ä', '–¢–∏–º–ª–∏–¥'],
            'description': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ –ø–æ–∑–∏—Ü–∏—é Senior Developer',
            'location': '–û—Ñ–∏—Å, –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è 2',
            'type': '–ò–Ω—Ç–µ—Ä–≤—å—é',
            'priority': 'medium',
            'prepared': False
        }
    ]
    
    return demo_events

def is_today(timestamp):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º"""
    if not timestamp:
        return False
    try:
        event_date = datetime.fromisoformat(timestamp).date()
        return event_date == datetime.now().date()
    except:
        return False

def is_upcoming(timestamp):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º"""
    if not timestamp:
        return False
    try:
        event_time = datetime.fromisoformat(timestamp)
        return event_time > datetime.now()
    except:
        return False

def calculate_free_time(events):
    """–†–∞—Å—á–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    total_hours = sum(event.get('duration', 1) for event in events)
    work_hours = 8  # –†–∞–±–æ—á–∏–π –¥–µ–Ω—å
    return f"{work_hours - min(total_hours, work_hours):.1f}—á"

def format_event_time(event):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è"""
    start_time = event.get('start_time')
    if start_time:
        try:
            dt = datetime.fromisoformat(start_time)
            return dt.strftime("%d.%m.%Y %H:%M")
        except:
            return start_time
    return "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

def get_event_type_badge(event_type):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–π–¥–∂–∞ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
    colors = {
        '–í—Å—Ç—Ä–µ—á–∏': '#28a745',
        '–°–æ–∑–≤–æ–Ω—ã': '#17a2b8',
        '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏': '#ffc107',
        '–ò–Ω—Ç–µ—Ä–≤—å—é': '#dc3545',
        '–õ–∏—á–Ω—ã–µ': '#6c757d'
    }
    
    color = colors.get(event_type, '#6c757d')
    return f'<span style="background-color: {color}; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">{event_type}</span>'

def generate_recommendations(events):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    recommendations = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
    daily_events = {}
    for event in events:
        if event.get('start_time'):
            try:
                date = datetime.fromisoformat(event['start_time']).date()
                daily_events[date] = daily_events.get(date, 0) + 1
            except:
                continue
    
    # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Å—Ç—Ä–µ—á –≤ –¥–µ–Ω—å
    for date, count in daily_events.items():
        if count > 5:
            recommendations.append(f"‚ö†Ô∏è {date.strftime('%d.%m.%Y')}: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Å—Ç—Ä–µ—á ({count}). –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–∞.")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
    unprepared = len([e for e in events if not e.get('prepared', False)])
    if unprepared > 0:
        recommendations.append(f"üìã {unprepared} –≤—Å—Ç—Ä–µ—á —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –≤—Å—Ç—Ä–µ—á–∞–º–∏
    sorted_events = sorted(events, key=lambda x: x.get('start_time', ''))
    for i in range(len(sorted_events) - 1):
        try:
            current_end = datetime.fromisoformat(sorted_events[i]['start_time']) + timedelta(hours=sorted_events[i].get('duration', 1))
            next_start = datetime.fromisoformat(sorted_events[i+1]['start_time'])
            
            gap = (next_start - current_end).total_seconds() / 60  # –≤ –º–∏–Ω—É—Ç–∞—Ö
            
            if gap < 15:
                recommendations.append(f"‚è∞ –ú–µ–∂–¥—É –≤—Å—Ç—Ä–µ—á–∞–º–∏ '{sorted_events[i]['title']}' –∏ '{sorted_events[i+1]['title']}' —Ç–æ–ª—å–∫–æ {gap:.0f} –º–∏–Ω—É—Ç. –í–æ–∑–º–æ–∂–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞.")
        except:
            continue
    
    if not recommendations:
        recommendations.append("‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ö–æ—Ä–æ—à–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç.")
    
    return recommendations

def prepare_meeting(event):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—Å—Ç—Ä–µ—á–µ"""
    st.success(f"–ù–∞—á–∞—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—Å—Ç—Ä–µ—á–µ: {event.get('title')}")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:
    # - –°–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    # - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≤–µ—Å—Ç–∫–∏
    # - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
def create_agenda(event):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≤–µ—Å—Ç–∫–∏ –¥–Ω—è"""
    st.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≤–µ—Å—Ç–∫–∏ –¥–ª—è: {event.get('title')}")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ò–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–≤–µ—Å—Ç–∫–∏
    # –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å—Ç—Ä–µ—á–µ

if __name__ == "__main__":
    main()