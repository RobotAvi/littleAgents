"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—á—Ç–æ–π
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞, –≤—ã–¥–µ–ª—è–µ—Ç –≤–∞–∂–Ω—ã–µ, 
—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∏—Å–µ–º, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–∞.
"""

import streamlit as st
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from shared.llm_client import llm_client
from shared.config import Config
from shared.utils import (
    create_streamlit_header, display_metrics, 
    display_data_table, send_notification, 
    validate_config, async_to_sync
)
from email_client import EmailClient
from datetime import datetime, timedelta
import asyncio

def main():
    create_streamlit_header(
        "–†–∞–±–æ—Ç–∞ —Å –ø–æ—á—Ç–æ–π", 
        "–ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò"
    )
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = Config.get_utility_config('email_manager')
    required_keys = ['email_user', 'email_password', 'openai_api_key']
    
    if not validate_config(config, required_keys):
        st.stop()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—á—Ç—ã
    email_client = EmailClient(
        username=config['email_user'],
        password=config['email_password'],
        imap_server=config['imap_server'],
        imap_port=config['imap_port']
    )
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
        period = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:",
            ["–°–µ–≥–æ–¥–Ω—è", "–í—á–µ—Ä–∞", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è", "–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è"],
            index=0
        )
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        email_limit = st.slider("–ú–∞–∫—Å–∏–º—É–º –ø–∏—Å–µ–º:", 5, 50, 20)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–∞–ø–∫–∞–º
        folder = st.selectbox(
            "–ü–∞–ø–∫–∞ –ø–æ—á—Ç—ã:",
            ["INBOX", "Sent", "Draft", "Spam"],
            index=0
        )
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        auto_refresh = st.checkbox("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω", False)
        
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
            st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìä –û–±–∑–æ—Ä", "üìß –ü–∏—Å—å–º–∞", "ü§ñ –ò–ò –ê–Ω–∞–ª–∏–∑", "üìã –ó–∞–¥–∞—á–∏"
    ])
    
    with tab1:
        st.subheader("üìä –û–±–∑–æ—Ä –ø–æ—á—Ç—ã")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Å–µ–º..."):
            try:
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
                if period == "–°–µ–≥–æ–¥–Ω—è":
                    since_date = datetime.now().date()
                elif period == "–í—á–µ—Ä–∞":
                    since_date = datetime.now().date() - timedelta(days=1)
                elif period == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è":
                    since_date = datetime.now().date() - timedelta(days=3)
                else:
                    since_date = datetime.now().date() - timedelta(days=7)
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Å–µ–º
                emails = email_client.get_emails(
                    folder=folder,
                    since_date=since_date,
                    limit=email_limit
                )
                
                if emails:
                    # –ú–µ—Ç—Ä–∏–∫–∏
                    total_emails = len(emails)
                    unread_emails = len([e for e in emails if not e.get('read', True)])
                    important_emails = len([e for e in emails if e.get('priority') == 'high'])
                    
                    metrics = {
                        "–í—Å–µ–≥–æ –ø–∏—Å–µ–º": total_emails,
                        "–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö": unread_emails,
                        "–í–∞–∂–Ω—ã—Ö": important_emails,
                        "–ó–∞ –ø–µ—Ä–∏–æ–¥": period
                    }
                    
                    display_metrics(metrics)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                    st.subheader("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
                    
                    import pandas as pd
                    import plotly.express as px
                    
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                    email_times = []
                    for email in emails:
                        if email.get('date'):
                            try:
                                email_date = datetime.fromisoformat(str(email['date']))
                                email_times.append({
                                    'hour': email_date.hour,
                                    'date': email_date.date(),
                                    'count': 1
                                })
                            except:
                                continue
                    
                    if email_times:
                        df = pd.DataFrame(email_times)
                        hourly_stats = df.groupby('hour')['count'].sum().reset_index()
                        
                        fig = px.bar(
                            hourly_stats, 
                            x='hour', 
                            y='count',
                            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∏—Å–µ–º –ø–æ —á–∞—Å–∞–º",
                            labels={'hour': '–ß–∞—Å –¥–Ω—è', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º'}
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    
                else:
                    st.info("–ü–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å–µ–º: {e}")
                emails = []
    
    with tab2:
        st.subheader("üìß –°–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º")
        
        if 'emails' in locals() and emails:
            # –§–∏–ª—å—Ç—Ä—ã
            col1, col2 = st.columns(2)
            
            with col1:
                show_read = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ", True)
                show_unread = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ", True)
            
            with col2:
                priority_filter = st.selectbox(
                    "–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:",
                    ["–í—Å–µ", "–í—ã—Å–æ–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–ù–∏–∑–∫–∏–π"]
                )
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∏—Å–µ–º
            filtered_emails = []
            for email in emails:
                # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ—Å—Ç–∏
                if not show_read and email.get('read', True):
                    continue
                if not show_unread and not email.get('read', True):
                    continue
                
                # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                if priority_filter != "–í—Å–µ":
                    email_priority = email.get('priority', 'medium')
                    if priority_filter.lower() != email_priority:
                        continue
                
                filtered_emails.append(email)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Å–µ–º
            for i, email in enumerate(filtered_emails):
                with st.expander(
                    f"üìß {email.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')} | "
                    f"–û—Ç: {email.get('from', 'Unknown')} | "
                    f"{email.get('date', 'Unknown')}"
                ):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.markdown(f"**–û—Ç:** {email.get('from', 'Unknown')}")
                        st.markdown(f"**–¢–µ–º–∞:** {email.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')}")
                        st.markdown(f"**–î–∞—Ç–∞:** {email.get('date', 'Unknown')}")
                        
                        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
                        body = email.get('body', '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ')
                        if len(body) > 500:
                            st.markdown(f"**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:** {body[:500]}...")
                            if st.button(f"–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é #{i}"):
                                st.text(body)
                        else:
                            st.markdown(f"**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:** {body}")
                    
                    with col2:
                        # –°—Ç–∞—Ç—É—Å –ø–∏—Å—å–º–∞
                        read_status = "üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ" if email.get('read', True) else "üì© –ù–æ–≤–æ–µ"
                        st.markdown(f"**–°—Ç–∞—Ç—É—Å:** {read_status}")
                        
                        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                        priority = email.get('priority', 'medium')
                        priority_icon = "üî¥" if priority == 'high' else "üü°" if priority == 'medium' else "üü¢"
                        st.markdown(f"**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {priority_icon} {priority.title()}")
                        
                        # –î–µ–π—Å—Ç–≤–∏—è
                        if st.button(f"–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É #{i}", key=f"task_{i}"):
                            st.success("–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!")
                            
                        if st.button(f"–û—Ç–º–µ—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–º #{i}", key=f"important_{i}"):
                            st.success("–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤–∞–∂–Ω–æ–µ!")
        else:
            st.info("–ù–µ—Ç –ø–∏—Å–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    with tab3:
        st.subheader("ü§ñ –ò–ò –ê–Ω–∞–ª–∏–∑ –ø–∏—Å–µ–º")
        
        if 'emails' in locals() and emails:
            if st.button("üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ò–ò", type="primary"):
                with st.spinner("–ê–Ω–∞–ª–∏–∑ –ø–∏—Å–µ–º —Å –ø–æ–º–æ—â—å—é –ò–ò..."):
                    
                    @async_to_sync
                    async def analyze_emails():
                        return await llm_client.summarize_emails(emails)
                    
                    analysis = analyze_emails()
                    
                    st.subheader("üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
                    st.markdown(analysis)
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑"):
                        from shared.utils import save_json_data
                        
                        analysis_data = {
                            'timestamp': datetime.now().isoformat(),
                            'period': period,
                            'total_emails': len(emails),
                            'analysis': analysis
                        }
                        
                        save_json_data(analysis_data, f"email_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json")
                        st.success("–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        else:
            st.info("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø–∏—Å—å–º–∞ –≤–æ –≤–∫–ª–∞–¥–∫–µ '–û–±–∑–æ—Ä'")
    
    with tab4:
        st.subheader("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏")
        
        st.markdown("""
        **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∏—Å–µ–º:**
        
        1. üìß –ü–∏—Å—å–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ò–ò
        2. üéØ –û–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—è, —Ç—Ä–µ–±—É—é—â–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        3. üìã –°–æ–∑–¥–∞—é—Ç—Å—è –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
        4. üì¨ –û—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """)
        
        # –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤—Ä—É—á–Ω—É—é
        with st.form("manual_task"):
            st.subheader("‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤—Ä—É—á–Ω—É—é")
            
            task_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
            task_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ:")
            task_priority = st.selectbox("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", ["–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π"])
            task_due_date = st.date_input("–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
            
            if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"):
                if task_title:
                    st.success(f"–ó–∞–¥–∞—á–∞ '{task_title}' —Å–æ–∑–¥–∞–Ω–∞!")
                else:
                    st.error("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        
        # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á
        st.subheader("üìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á")
        st.info("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")

if __name__ == "__main__":
    main()